---
description: AI rules derived by SpecStory from the project AI interaction history
globs: *
---

## AI Coding Assistant Rules

### PROJECT DOCUMENTATION & CONTEXT SYSTEM

This section outlines the rules for documenting the project and maintaining context within the AI coding assistant.  All documentation should follow the conventions outlined below.  New documentation regarding common dashboard UI layout patterns has been added (see below). The `execution-plan.md` file should follow the structure and example provided in the new AI interactions from 2025-04-26.  The example execution plan should be used as a template for future projects.  All new execution plans should be structured with phases, sub-tasks, and expected outcomes. Each phase should logically build upon the previous one.  The execution plan should be broken out into complete units. Each phase should have sub-pieces detailing the expected outcomes.  Phases should be logically broken out so that each builds on top of the other (e.g., Landing page before Sign Up).

*   **Documentation Style:**  Use Markdown for all documentation.
*   **Version Control:** Use Git for version control. Commit messages should be clear and concise.
*   **Common Dashboard UI Layout Patterns:**  Refer to the document generated on 2025-04-26 for common dashboard UI layout patterns and best practices.  These patterns should be considered when designing user interfaces.  Key considerations include information hierarchy, user needs, dashboard type, consistency, responsiveness, white space, and interactivity. Common layout structures include grid, card, sections/panels, stratified, table, sidebar navigation, and top navigation bar.  See 2025-04-26_19-32-common-dashboard-ui-layout-patterns.md for details.  The top header should span the full width of the page. The sidebar and main content area should share the remaining space.  The sidebar should be hidden on smaller screens and visible on larger screens.  The sidebar should be positioned to the left of the main content area. The top header should contain the user's full name on the far right.
*   **Execution Plan Documentation:**  The `execution-plan.md` file should be structured with phases, sub-tasks, and expected outcomes.  Each phase should logically build upon the previous one.  See the example provided in the new AI interactions from 2025-04-26.  The example execution plan from 2025-04-26 should be used as a template for future projects.
*   **Phase 6:** Integrate Payments SDK (Client-Side via Script). Integrate the YourBrand Payments Onboarding SDK into the existing Onboarding page using the provided script loading method.  Add the YourBrand Payments SDK `<script>` tag to the application. This should likely be done using the Next.js `Script` component (`next/script`) within the Onboarding page or a relevant layout file for deferred loading. Identify the correct script URL from the integration guide. The correct Sandbox URL is: `https://www.paypalobjects.com/sdk/v1/js/sandbox.partner.js` Modify the Onboarding page UI: Add a dedicated `div` element that will serve as the container for the SDK's UI. Ensure it has a unique ID (e.g., `id="paypal-onboarding-container"`). Implement logic within the Onboarding page component using `useEffect` and `useState`: Wait for the SDK script to load (check if `window.Paypal.onboard` is defined). Once loaded, call `window.Paypal.onboard()` to initialize the SDK. Pass the necessary configuration object to the `onboard()` function: The ID of the container element (e.g., `containerId: 'paypal-onboarding-container'`). Static configuration like `partnerId` (from config/env) and `environment='sandbox'`. Placeholder values for dynamic credentials (`accessToken: null`, `referralId: null`), which will be fetched in Phase 7. Add basic loading states (e.g., showing "Loading SDK...") while waiting for the script and error handling if the script fails to load or initialization fails.
*   **Phase 7:** Server-Side SDK Credential/URL Generation (Partner Referrals API). Dynamically generate the required SDK `accessToken` and the seller onboarding `actionUrl` on the server using the PayPal Partner Referrals API during page load, passing them directly to the Onboarding component. Add `axios` for making server-side HTTP requests. Ensure PayPal Partner Client ID, Secret, and BN Code are securely available as environment variables (e.g., in `.env.local`). Modify the `OnboardingPage` component: Confirm it remains a Client Component. Ensure its signature accepts `accessToken` and `actionUrl` as props. Implement Server Component Logic: Rename the existing client component (e.g., to `OnboardingClientComponent`). Create a new default `async` function component in `page.tsx`. This Server Component will: Generate Partner Access Token. Make a `POST` request to the PayPal OAuth2 token endpoint using `axios`. Use Basic Authentication with the Partner Client ID and Secret. Request `grant_type=client_credentials`. Extract the `access_token` (Partner Token) from the response. Call Partner Referrals API. Make a `POST` request to `https://api-m.sandbox.paypal.com/v2/customer/partner-referrals` using `axios`. Include the generated Partner Token in the `Authorization: Bearer` header. Include the Partner BN Code (from env vars). Construct the request body, including: `tracking_id`, `operations`, `products`, `legal_consents`, *(Optional)* `partner_config_override`. Extract the `action_url` from the `links` array in the API response. Generate SDK Access Token. Simulate calling the necessary API (details potentially differ from Partner Referrals API) to generate the short-lived `accessToken` specifically required by the SDK's `initialize` method. Render Client Component. Render the `<OnboardingClientComponent>` passing the generated `accessToken` and `actionUrl` as props. Refactor `OnboardingClientComponent`: Ensure the `initializeAndRenderSDK` function uses the `accessToken` and `actionUrl` received via props when calling `window.Paypal.onboard.initialize`.


### TECH STACK

This section lists the technologies used in the project.

*   **Programming Languages:** TypeScript, JavaScript
*   **Frameworks/Libraries:** Next.js, Shadcn components, shadcn, React Hook Form, Zod, Sonner, axios, (List other frameworks/libraries)
*   **Databases:** (List databases)
*   **Tools:** Git, npm, npx, shadcn-ui (or shadcn), pnpm (List other tools)


### CODING STANDARDS

This section outlines the coding standards to be followed.

*   **Naming Conventions:** (Describe naming conventions)
*   **Code Formatting:** (Describe code formatting standards)
*   **Error Handling:** (Describe error handling best practices)
*   **Commenting:** (Describe commenting standards)


### WORKFLOW & RELEASE RULES

This section details the project workflow and release process.

*   **Branching Strategy:** (Describe branching strategy)
*   **Pull Request Process:** (Describe pull request process)
*   **Testing:** (Describe testing procedures)
*   **Deployment:** (Describe deployment process)


### DEBUGGING

This section outlines debugging procedures and best practices.

*   **Debugging Tools:** (List debugging tools)
*   **Debugging Techniques:** (Describe debugging techniques)
*   **Logging:** (Describe logging best practices)
*   **Resolving Module Not Found Errors:** Ensure correct path aliases are configured in `tsconfig.json` and that the necessary components have been added using `npx shadcn@latest add <component-name>`.  If using the deprecated `shadcn-ui` command, switch to `npx shadcn@latest add <component-name>`. Restart the development server after adding components.  Always ensure that the `components.json` file is present and correctly configured.


### BEST PRACTICES

This section contains general best practices for the project.

*   **Security:** (Describe security best practices)
*   **Performance:** (Describe performance best practices)
*   **Maintainability:** (Describe maintainability best practices)
*   **Landing Page Best Practices:** Include clear value propositions, visually appealing design, and a prominent call to action.  Refer to the updated `app/page.tsx` file for an example.  Value propositions should be based on competitor analysis and clearly articulate the benefits to the user.  The landing page should reflect key features and value propositions similar to those of BigCommerce, Miva, and Shopware. Always include clear value propositions, visually appealing design, and prominent call to action.  Value propositions should be based on competitor analysis and clearly articulate the benefits to the user. The landing page should reflect key features and value propositions similar to those of BigCommerce, Miva, and Shopware.  All buttons should include the `cursor-pointer` style for improved UX.  Global styles should be used to maintain consistency.  Avoid hardcoding dark mode styles unless absolutely necessary; instead, rely on system settings where possible.
* **Dashboard Layout:** The top header should span the full width of the page. The sidebar and main content area should share the remaining space.  The sidebar should be hidden on smaller screens and visible on larger screens.  The sidebar should be positioned to the left of the main content area.  The top header should contain the user's full name on the far right.
*   **Environment Variables:** Use `.env` files for environment variables. Create a `.env.example` file to document required variables (PAYPAL_CLIENT_ID, PAYPAL_CLIENT_SECRET, PAYPAL_BN_CODE). Add `.env.local` (and similar `.env.*` files except `.env.example`) to `.gitignore` to prevent committing sensitive data.  See `.env.example` for details.